/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define DEFAULT     0
#define BSPCO       1
#define RAISE       2
#define RAISE_EXT   3
#define NAV         4
#define FUNC        5
#define KEYBOARD    6

#define XXX &none
#define ___ &trans

#include "includes/macros.dtsi"


/{ 
    chosen {
        zmk,matrix_transform = &five_column_transform;
    };
};

/ {

    behaviors {

        ZMK_HOMEROW_BINDINGS(hm, &kp, &kp)

        hs: hold_tap_sticky {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&sk>;
        };

        ZMK_HOMEROW_BINDINGS(hm_ae_la, &kp, &u_ae)

        ZMK_HOMEROW_BINDINGS(krl, &mo, &key_repeat)
        
        ZMK_MOD_MORPH_S(sqt_under, &kp SQT, &kp UNDER)
        ZMK_MOD_MORPH_S(minus_dqt, &kp MINUS, &kp DQT)
        ZMK_MOD_MORPH_S(do_co, &kp DOT, &kp COLON)
        ZMK_MOD_MORPH_S(co_se, &kp COMMA, &kp SEMI)
        ZMK_MOD_MORPH_S(gresc_, &kp ESC, &kp GRAVE)

        ZMK_MOD_MORPH_S(lbr, &kp LS(LBKT), &kp LS(COMMA))
        ZMK_MOD_MORPH_S(rbr, &kp LS(RBKT), &kp LS(DOT))
        
        ZMK_TAP_DANCE_UMLAUT(u_ae, A, mu_ae)
        ZMK_TAP_DANCE_UMLAUT(u_ue, U, mu_ue)
        ZMK_TAP_DANCE_UMLAUT(u_oe, O, mu_oe)

        // uml_oe: mod_morph_umlaut_oe {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&mu_oe>, <&mu_oe>;
        //     mods = <(MOD_LSFT|MOD_RSFT)>;
        // };


    };


    macros {

        ZMK_MACRO_UMLAUT(mu_ae, A)
        ZMK_MACRO_UMLAUT(mu_ue, U)
        ZMK_MACRO_UMLAUT(mu_oe, O)

        // backspace macros
        
        dl: delete_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LG(RIGHT)>
                , <&macro_tap &kp LG(BSPC)>
                ;
        };
        
    };


	keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
                /*                                                                          ' _                */
                &kp B       &kp L           &kp D           &kp W       &kp Y               &sqt_under      &kp F               &u_oe               &u_ue           &kp J
                &kp N       &hm LCTRL R     &hm LALT T      &hm LGUI S  &kp G               &kp Z           &hm LGUI H          &hm_ae_la LALT A    &hm RCTRL E     &kp I
                /*                                                                                                              . :                 - "             , ;      */
                &kp Q       &kp X           &kp M           &kp C       &kp V               &kp K           &kp P               &do_co              &minus_dqt      &co_se
                                            &hs LSHFT LSHFT &kp SPACE   &mo RAISE           &kp BSPC        &krl RAISE_EXT XXX  &tog NAV
            >;
        };

        backspace_options {
            bindings = <
                /*
                - tap -> Backspace
                - hold -> new layer with multiple backspace options
                    - delete to end
                    - delete to start
                    - delete word forward/backwards
                    - delete fast (idk etc.)


                */
                XXX     XXX     XXX     XXX     XXX             XXX             XXX             &kp BSPC    XXX             XXX
                /*                                              b start         b word          d           d word          d end       */
                XXX     XXX     XXX     XXX     XXX             &kp LG(BSPC)    &kp LA(BSPC)    &kp DEL     &kp LA(DEL)     &kp LC(K)
                XXX     XXX     XXX     XXX     XXX             XXX             XXX             XXX         XXX             XXX
                                XXX     XXX     XXX             XXX             XXX             XXX
            >;
        };

        raise {
            bindings = <
                /* Grave Escape  @      #           $           %                   ^           &               *           ;               TO FUNC      */
                &gresc_     &kp AT      &kp LA(N3)  &kp DLLR    &kp PRCNT           &kp CARET   &kp AMPS        &kp STAR    &kp SEMI        &tog FUNC
                /* +        =           /           ¨ for öäü   :                   \           { <             } >         |               DEL         */
                &kp PLUS    &kp EQUAL   &kp FSLH    &kp LA(U)   &kp COLON           &kp BSLH    &lbr            &rbr        &kp LS(BSLH)    &kp DEL
                /*  ~       €           ?           !           ß                   [           (               )           ]               TO NAV      */
                &kp TILDE   &kp LA(N2)  &kp QMARK   &kp EXCL    &kp LA(S)           &kp LBKT    &kp LPAR        &kp RPAR    &kp RBKT        &tog NAV
                                        XXX         XXX         XXX                 &kp RET     &tog RAISE_EXT  &kp RSHFT
            >;
        };
        
        // toggled
        raise_ext {
            bindings = <
                ___         ___         ___         ___         ___                 &kp PLUS        &kp KP_N7       &kp KP_N8   &kp KP_N9   &kp STAR
                ___         ___         ___         ___         ___                 &kp MINUS       &kp KP_N4       &kp KP_N5   &kp KP_N6   &kp FSLH
                ___         ___         ___         ___         ___                 &kp EQUAL       &kp KP_N1       &kp KP_N2   &kp KP_N3   ___
                                        ___         ___         &to DEFAULT         &tog KEYBOARD   &tog RAISE_EXT  &kp KP_N0
            >;
        };

        // toggled
        nav {
            bindings = <
                ___         ___         ___         ___         ___                 ___         ___         ___         ___         ___
                ___         ___         ___         ___         ___                 ___         ___         ___         ___         ___
                ___         ___         ___         ___         ___                 ___         ___         ___         ___         ___
                                        ___         ___         &to DEFAULT         ___         ___         ___
            >;
        };

        // toggled
        func {
            bindings = <
                &kp F1  &kp F2  &kp F3  &kp F4   XXX                XXX     &kp F13 &kp F14 &kp F15 &kp F16
                &kp F5  &kp F6  &kp F7  &kp F8   XXX                XXX     &kp F17 &kp F18 &kp F19 &kp F20
                &kp F9  &kp F10 &kp F11 &kp F12  XXX                XXX     &kp F21 &kp F22 &kp F23 &kp F24
                                XXX     XXX      &to DEFAULT        XXX     XXX     XXX  
            >;
        };

        keyboard {
            bindings = <
                XXX     XXX     XXX     XXX     XXX                     XXX     XXX             &bt BT_PRV      &bt BT_NXT      XXX
                XXX     XXX     XXX     XXX     &bt BT_CLR              XXX     &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3
                XXX     XXX     XXX     XXX     &bt BT_CLR_ALL          XXX     &bt BT_DISC 0   &bt BT_DISC 1   &bt BT_DISC 2   &bt BT_DISC 3
                                XXX     XXX     &to DEFAULT             XXX     XXX             XXX
            >;
        };

        empty {
            bindings = <
                XXX     XXX     XXX     XXX     XXX             XXX     XXX     XXX     XXX     XXX
                XXX     XXX     XXX     XXX     XXX             XXX     XXX     XXX     XXX     XXX
                XXX     XXX     XXX     XXX     XXX             XXX     XXX     XXX     XXX     XXX
                                XXX     XXX     XXX             XXX     XXX     XXX  
            >;
        };
    };
};
