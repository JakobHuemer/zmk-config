/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT     0
#define RAISE       1
#define RAISE_EXT   2
#define NAV         3
#define FUNC        4

#define XXX &none
#define ___ &trans


/ {

    combos {
        compatible = "zmk,combos";
        combo_colon {
            layers = <DEFAULT>;
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp COLON>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <50>;
            retro-tap;
            hold-while-undecided;
            bindings = <&kp>, <&kp>;
        };

        sqt_under: forward_slash_under {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp UNDER>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_dqt: minus_double_quote {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp DQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ge: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
    };


	keymap {
        compatible = "zmk,keymap";

        default {
            // ' " - _ , < . >
            bindings = <
                XXX   &kp B     &kp L           &kp D           &kp W           &kp Y               &sqt_under  &kp F           &kp O           &kp U           &kp J       XXX  
                XXX   &kp N     &hm LCTRL R     &hm LALT T      &hm LGUI S      &kp G               &kp Z       &hm RGUI H      &hm RALT A      &hm RCTRL E     &kp I       XXX  
                XXX   &kp Q     &kp X           &kp M           &kp C           &kp V               &kp K       &kp P           &kp DOT         &minus_dqt      &kp COMMA   XXX  
                                                &kp LSHFT       &kp SPACE       &mo RAISE           &kp BSPC    &key_repeat     &kp RET
            >;
        };

        raise {
            bindings = <
                /*    Grave Escape  @           #           $           %               ^               &               *               ;               TO FUNC      */
                XXX   &ge           &kp AT      &kp LA(N3)  &kp DLLR    &kp PRCNT       &kp CARET       &kp AMPS        &kp STAR        &kp SEMI        &tog FUNC XXX  
                /*    +             =           /           -           -               \               [               ]               |               DEL         */
                XXX   &kp PLUS      &kp EQUAL   &kp FSLH    XXX         XXX             &kp BSLH        &kp LS(LBKT)    &kp LS(RBKT)    &kp LS(BSLH)    &kp DEL   XXX  
                /*    ~             â‚¬           ?           !           "               [               (               )               ]               TO NAV      */
                XXX   &kp TILDE     &kp LA(N2)  &kp QMARK   &kp EXCL    &kp DQT         &kp LBKT        &kp LPAR        &kp RPAR        &kp RBKT        &tog NAV  XXX  
                                                XXX         XXX         XXX             &kp RET         &tog RAISE_EXT  &kp RSHFT
            >;
        };
        
        // toggled
        raise_ext {
            bindings = <
                XXX     ___         ___         ___         ___         ___                 &kp PLUS    &kp KP_N7   &kp KP_N8   &kp KP_N9   &kp STAR  XXX  
                XXX     ___         ___         ___         ___         ___                 &kp MINUS   &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp FSLH  XXX  
                XXX     ___         ___         ___         ___         ___                 &kp EQUAL   &kp KP_N1   &kp KP_N2   &kp KP_N3   ___       XXX  
                                                ___         &to DEFAULT ___                 ___         ___         &kp KP_N0
            >;
        };

        // toggled
        nav {
            bindings = <
                XXX     ___         ___         ___         ___         ___                 ___         ___         ___         ___         ___       XXX  
                XXX     ___         ___         ___         ___         ___                 ___         ___         ___         ___         ___       XXX  
                XXX     ___         ___         ___         ___         ___                 ___         ___         ___         ___         ___       XXX  
                                                ___         &to DEFAULT ___                 ___         ___         ___   
            >;
        };

        // toggled
        func {
            bindings = <
                XXX     &kp F1  &kp F2  &kp F3  &kp F4   XXX                XXX     &kp F13 &kp F14 &kp F15 &kp F16 XXX  
                XXX     &kp F5  &kp F6  &kp F7  &kp F8   XXX                XXX     &kp F17 &kp F18 &kp F19 &kp F20 XXX  
                XXX     &kp F9  &kp F10 &kp F11 &kp F12  XXX                XXX     &kp F21 &kp F22 &kp F23 &kp F24 XXX  
                                        XXX     &to DEFAULT XXX             XXX     XXX     XXX  
            >;
        };

        empty {
            bindings = <
                XXX     XXX     XXX     XXX     XXX     XXX             XXX     XXX     XXX     XXX     XXX     XXX  
                XXX     XXX     XXX     XXX     XXX     XXX             XXX     XXX     XXX     XXX     XXX     XXX  
                XXX     XXX     XXX     XXX     XXX     XXX             XXX     XXX     XXX     XXX     XXX     XXX  
                                        XXX     XXX     XXX             XXX     XXX     XXX  
            >;
        };
    };
};
