/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT     0
#define RAISE       1
#define RAISE_EXT   2
#define NAV         3
#define FUNC        4
#define KEYBOARD    5

#define XXX &none
#define ___ &trans

/ {

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <50>;
            retro-tap;
            // hold-while-undecided;
            bindings = <&kp>, <&kp>;
        };

        sqt_under: forward_slash_under {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp UNDER>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_dqt: minus_double_quote {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp DQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        

        tdsmeh_inner: tap_dance_s_meh_inner {
            compatible = "zmk,behavior-tap-dance";
            label = "tdsmeh_inner";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp S>, <&kp LG(LS(LALT))>;
        };
        tdsmeh: tap_dance_s_meh {
            compatible = "zmk,behavior-hold-tap";
            label = "tdsmeh";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <225>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&tdsmeh_inner>;
            // homerow mod settings
            require-prior-idle-ms = <50>;
            retro-tap;
        };

        tdhmeh_inner: tap_dance_h_meh_inner {
            compatible = "zmk,behavior-tap-dance";
            label = "tdhmeh_inner";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp H>, <&kp LG(LS(LALT))>;
        };
        tdhmeh: tap_dance_h_meh {
            compatible = "zmk,behavior-hold-tap";
            label = "tdhmeh";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <225>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&tdhmeh_inner>;
            // homerow mod settings
            require-prior-idle-ms = <50>;
            retro-tap;
        };


        // tdhmeh_inner: tap_dance_h_com_meh_inner {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "tdhmeh_inner";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&hm LGUI H>, <&kp LG(LS(LALT))>;
        // };

        // td_h_meh: tap_dance_h_cmd_meh {
        //     compatible = "zmk,behavior-tap-dance";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&hm H LGUI>, <&kp LGUI(LS(LALT))>;
        // };

    };


	keymap {
        compatible = "zmk,keymap";

        default {
            // ' " - _ , < . >
            bindings = <
                XXX   &kp B     &kp L           &kp D           &kp W           &kp Y               &sqt_under  &kp F           &kp O           &kp U           &kp J       XXX  
                XXX   &kp N     &hm LCTRL R     &hm LALT T      &tdsmeh LGUI K  &kp G               &kp Z       &tdhmeh RGUI K  &hm RALT A      &hm RCTRL E     &kp I       XXX  
                XXX   &kp Q     &kp X           &kp M           &kp C           &kp V               &kp K       &kp P           &kp DOT         &minus_dqt      &kp COMMA   XXX  
                                                &kp LSHFT       &kp SPACE       &mo RAISE           &kp BSPC    &key_repeat     &tog NAV
            >;
        };

        raise {
            bindings = <
                /*    Grave Escape  @           #           $           %                   ^               &               *               ;               TO FUNC      */
                XXX   &gresc        &kp AT      &kp LA(N3)  &kp DLLR    &kp PRCNT           &kp CARET       &kp AMPS        &kp STAR        &kp SEMI        &tog FUNC XXX  
                /*    +             =           /           ¨ for öäü   :                   \               [               ]               |               DEL         */
                XXX   &kp PLUS      &kp EQUAL   &kp FSLH    &kp LA(U)   &kp COLON           &kp BSLH        &kp LS(LBKT)    &kp LS(RBKT)    &kp LS(BSLH)    &kp DEL   XXX  
                /*    ~             €           ?           !           ß                   [               (               )               ]               TO NAV      */
                XXX   &kp TILDE     &kp LA(N2)  &kp QMARK   &kp EXCL    &kp LA(S)           &kp LBKT        &kp LPAR        &kp RPAR        &kp RBKT        &tog NAV  XXX  
                                                XXX         XXX         XXX                 &kp RET         &tog RAISE_EXT  &kp RSHFT
            >;
        };
        
        // toggled
        raise_ext {
            bindings = <
                XXX     ___         ___         ___         ___         ___                 &kp PLUS        &kp KP_N7       &kp KP_N8   &kp KP_N9   &kp STAR  XXX  
                XXX     ___         ___         ___         ___         ___                 &kp MINUS       &kp KP_N4       &kp KP_N5   &kp KP_N6   &kp FSLH  XXX  
                XXX     ___         ___         ___         ___         ___                 &kp EQUAL       &kp KP_N1       &kp KP_N2   &kp KP_N3   ___       XXX  
                                                ___         ___         &to DEFAULT         &tog KEYBOARD   &tog RAISE_EXT  &kp KP_N0
            >;
        };

        // toggled
        nav {
            bindings = <
                XXX     ___         ___         ___         ___         ___                 ___         ___         ___         ___         ___       XXX  
                XXX     ___         ___         ___         ___         ___                 ___         ___         ___         ___         ___       XXX  
                XXX     ___         ___         ___         ___         ___                 ___         ___         ___         ___         ___       XXX  
                                                ___         ___         &to DEFAULT         ___         ___         ___   
            >;
        };

        // toggled
        func {
            bindings = <
                XXX     &kp F1  &kp F2  &kp F3  &kp F4   XXX                XXX     &kp F13 &kp F14 &kp F15 &kp F16 XXX  
                XXX     &kp F5  &kp F6  &kp F7  &kp F8   XXX                XXX     &kp F17 &kp F18 &kp F19 &kp F20 XXX  
                XXX     &kp F9  &kp F10 &kp F11 &kp F12  XXX                XXX     &kp F21 &kp F22 &kp F23 &kp F24 XXX  
                                        XXX     XXX      &to DEFAULT        XXX     XXX     XXX  
            >;
        };

        keyboard {
            bindings = <
                XXX     XXX     XXX     XXX     XXX     XXX                     XXX     XXX             &bt BT_PRV      &bt BT_NXT      XXX             XXX  
                XXX     XXX     XXX     XXX     XXX     &bt BT_CLR              XXX     &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    XXX  
                XXX     XXX     XXX     XXX     XXX     &bt BT_CLR_ALL          XXX     &bt BT_DISC 0   &bt BT_DISC 1   &bt BT_DISC 2   &bt BT_DISC 3   XXX  
                                        XXX     XXX     &to DEFAULT             XXX     XXX             XXX
            >;
        };

        empty {
            bindings = <
                XXX     XXX     XXX     XXX     XXX     XXX             XXX     XXX     XXX     XXX     XXX     XXX  
                XXX     XXX     XXX     XXX     XXX     XXX             XXX     XXX     XXX     XXX     XXX     XXX  
                XXX     XXX     XXX     XXX     XXX     XXX             XXX     XXX     XXX     XXX     XXX     XXX  
                                        XXX     XXX     XXX             XXX     XXX     XXX  
            >;
        };
    };
};
